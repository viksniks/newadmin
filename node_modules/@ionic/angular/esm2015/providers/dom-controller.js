import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
let DomController = class DomController {
    /**
     * Schedules a task to run during the READ phase of the next frame.
     * This task should only read the DOM, but never modify it.
     */
    read(cb) {
        getQueue().read(cb);
    }
    /**
     * Schedules a task to run during the WRITE phase of the next frame.
     * This task should write the DOM, but never READ it.
     */
    write(cb) {
        getQueue().write(cb);
    }
};
DomController.ɵfac = function DomController_Factory(t) { return new (t || DomController)(); };
DomController.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DomController, factory: function (t) { return DomController.ɵfac(t); }, providedIn: 'root' });
DomController.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DomController_Factory() { return new DomController(); }, token: DomController, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DomController, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
export { DomController };
const getQueue = () => {
    const win = typeof window !== 'undefined' ? window : null;
    if (win != null) {
        const Ionic = win.Ionic;
        if (Ionic && Ionic.queue) {
            return Ionic.queue;
        }
        return {
            read: (cb) => win.requestAnimationFrame(cb),
            write: (cb) => win.requestAnimationFrame(cb)
        };
    }
    return {
        read: (cb) => cb(),
        write: (cb) => cb()
    };
};
const ɵ0 = getQueue;
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLWNvbnRyb2xsZXIuanMiLCJzb3VyY2VzIjpbIkBpb25pYy9hbmd1bGFyL3Byb3ZpZGVycy9kb20tY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQzs7QUFJQSxJQUFhLGFBQWEsR0FBMUIsTUFBYSxhQUFhO0FBQzFCLElBQ0U7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQUUsSUFBSSxDQUFDLEVBQWU7QUFDdEIsUUFBSSxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBRSxLQUFLLENBQUMsRUFBZTtBQUN2QixRQUFJLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QixJQUFFLENBQUM7QUFDSCxDQUFDOzt1SkFBQTtBQUNEO0FBbEJhLGFBQWEsNEJBSHpCLFVBQVUsQ0FBQyxVQUNWO0FBQVUsRUFBRSxNQUFNLE9BQ25CLENBQUMsSUFDVztPQUFhLENBaUJ6Qjs7OzBCQUNEO0FBQ0EsU0FuQmEsYUFBYTtBQW1CMUIsTUFBTSxRQUFRLEdBQUcsR0FBRyxFQUFFO0FBQ3RCLElBQUUsTUFBTSxHQUFHLEdBQUcsT0FBUSxNQUFjLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQVcsQ0FBQztBQUM1RSxJQUNFLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtBQUNuQixRQUFJLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDNUIsUUFBSSxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQzlCLFlBQU0sT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQ3pCLFNBQUs7QUFDTCxRQUNJLE9BQU87QUFDWCxZQUFNLElBQUksRUFBRSxDQUFDLEVBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQztBQUN0RCxZQUFNLEtBQUssRUFBRSxDQUFDLEVBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQztBQUN2RCxTQUFLLENBQUM7QUFDTixLQUFHO0FBQ0gsSUFDRSxPQUFPO0FBQ1QsUUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMzQixRQUFJLEtBQUssRUFBRSxDQUFDLEVBQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzVCLEtBQUcsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGO0FBQ29CO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBEb21Db250cm9sbGVyIHtcblxuICAvKipcbiAgICogU2NoZWR1bGVzIGEgdGFzayB0byBydW4gZHVyaW5nIHRoZSBSRUFEIHBoYXNlIG9mIHRoZSBuZXh0IGZyYW1lLlxuICAgKiBUaGlzIHRhc2sgc2hvdWxkIG9ubHkgcmVhZCB0aGUgRE9NLCBidXQgbmV2ZXIgbW9kaWZ5IGl0LlxuICAgKi9cbiAgcmVhZChjYjogUmFmQ2FsbGJhY2spIHtcbiAgICBnZXRRdWV1ZSgpLnJlYWQoY2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjaGVkdWxlcyBhIHRhc2sgdG8gcnVuIGR1cmluZyB0aGUgV1JJVEUgcGhhc2Ugb2YgdGhlIG5leHQgZnJhbWUuXG4gICAqIFRoaXMgdGFzayBzaG91bGQgd3JpdGUgdGhlIERPTSwgYnV0IG5ldmVyIFJFQUQgaXQuXG4gICAqL1xuICB3cml0ZShjYjogUmFmQ2FsbGJhY2spIHtcbiAgICBnZXRRdWV1ZSgpLndyaXRlKGNiKTtcbiAgfVxufVxuXG5jb25zdCBnZXRRdWV1ZSA9ICgpID0+IHtcbiAgY29uc3Qgd2luID0gdHlwZW9mICh3aW5kb3cgYXMgYW55KSAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBudWxsIGFzIGFueTtcblxuICBpZiAod2luICE9IG51bGwpIHtcbiAgICBjb25zdCBJb25pYyA9IHdpbi5Jb25pYztcbiAgICBpZiAoSW9uaWMgJiYgSW9uaWMucXVldWUpIHtcbiAgICAgIHJldHVybiBJb25pYy5xdWV1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVhZDogKGNiOiBhbnkpID0+IHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpLFxuICAgICAgd3JpdGU6IChjYjogYW55KSA9PiB3aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlYWQ6IChjYjogYW55KSA9PiBjYigpLFxuICAgIHdyaXRlOiAoY2I6IGFueSkgPT4gY2IoKVxuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgUmFmQ2FsbGJhY2sgPSAodGltZVN0YW1wPzogbnVtYmVyKSA9PiB2b2lkO1xuIl19